% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lingmatch.R
\name{lma_weight}
\alias{lma_weight}
\title{Document-Term Matrix Weighting}
\usage{
lma_weight(dtm, weight = "count", to.freq = TRUE, freq.complete = TRUE,
  log.base = 10, doc.only = FALSE)
}
\arguments{
\item{dtm}{a matrix with words as column names.}

\item{weight}{a string referring at least partially to one (or a combination; see note) of the
  available weighting methods:

  \strong{Term weights} (applied uniquely to each cell)
  \tabular{lll}{
    \code{binary} \tab \code{(dtm > 0) * 1} \tab convert frequencies to 1s and 0s; remove
      differences in frequencies\cr
    \code{log} \tab \code{log(dtm + 1)} \tab logarithm of frequencies\cr
    \code{sqrt} \tab \code{dtm^.5} \tab square root of frequencies\cr
    \code{count} \tab \code{dtm} \tab unaltered; sometimes called term frequencies (tf)\cr
    \code{amplify} \tab \code{dtm^1.1} \tab amplify difference in frequencies\cr
  }

  \strong{Document weights} (applied by column)
  \tabular{lll}{
    \code{entropy} \tab \code{1 - rowSums(x * log(x) / log(ncol(x)))} \tab where
      \code{x = t(dtm) / colSums(dtm > 0)};
      entropy of term-conditional document distribution; gives common words more weight\cr
    \code{dfmax} \tab \code{log(apply(dtm, 2, max))} \tab logarithm of maximum document
      frequency\cr
    \code{df} \tab \code{log(colSums(dtm > 0))} \tab logarithm of binary document sum\cr
    \code{poisson} \tab \code{1 - dpois(0, colSums(dtm) / nrow(dtm))} \tab Poisson-predicted
      erm distribution\cr
    \code{ridf} \tab \code{idf - log(poisson)} \tab residual inverse document frequency;
      gives uncommon words more weight\cr
    \code{normal} \tab \code{1 / colSums(dtm^2)^.5} \tab normalized document frequency\cr
    \code{idf} \tab \code{log(nrow(dtm) / colSums(dtm > 0))} \tab inverse document frequency\cr
  }}

\item{to.freq}{logical: if \code{FALSE}, the dtm is not divided by document word count before
being weighted.}

\item{freq.complete}{if the dtm was made with \code{\link{lma_dtm}} (has a \code{'WC'}
attribute), word counts for
frequencies can be based on the raw count (default; \code{freq.complete = TRUE}). If
\code{freq.complete = FALSE}, or the dtm does not have a \code{'WC'} attribute,
\code{rowSums(dtm)} is used as word count.}

\item{log.base}{the base of logarithms, applied to any weight using \code{\link[base]{log}}.
Default is 10.}

\item{doc.only}{logical: if \code{TRUE}, only document weights are returned (a single value for
each term).}
}
\description{
Weight a document-term matrix.
}
\note{
Term weights works to dampen differences in word count, with differences meaning increasingly less
from \code{amplify} to \code{count} to \code{sqrt} to \code{log} to \code{binary}.

Document weights work to treat words differently based on their frequency. \code{entropy},
\code{dfmax}, \code{df}, and \code{poisson} (most to least intense over document frequencies of ~15)
give more frequent words more weight, whereas \code{ridf}, \code{normal}, and \code{idf}, give less
frequent words more weight.

\code{weight} can either be a vector with two characters, corresponding to term weight and
document weight (e.g., \code{weight = c('count','idf')}), or it can be a string with term and
document weights separated by any of \code{*-_, :;/\\\\} (e.g., \code{weight = 'count * idf'}).
\code{'tf'} is also acceptable for \code{'count'}, and \code{'tfidf'} will be parsed as
\code{c('count','idf')}, though this is a special case.

For \code{weight}, term or document weights can be entered individually; term weights alone will
not apply any document weight, and document weights alone will apply a \code{'count'} term weight
(unless \code{doc.only = TRUE}, in which case a term-named vector of document weights is returned
instead of a weighted dtm).
}
\examples{
# visualize term and document weights
document_frequency = seq_len(20)
op = list(y='term_frequency~document_frequency',line='connected',leg='outside')

# term weights
term_weights = c('binary','log','sqrt','count','amplify')
term_frequency = sapply(term_weights,function(w)lma_weight(matrix(document_frequency,1),w,FALSE))
if(require(splot)) splot(myl=c(0,25),options=op)

# document weights
doc_weights = c('df','dfmax','idf','normal','poisson','ridf','entropy')
term_frequency = sapply(doc_weights,function(w)
  lma_weight(sapply(document_frequency,function(i)sample(0:i,5000,TRUE)),w,FALSE,doc.only=TRUE)
)
if(require(splot)) splot(myl=c(-3,3),mv.scale=TRUE,options=op)

}
